  CREATE TABLE "MAXWELL_CGPA_SUMMARY" 
   (	"STUDENT_ID" NUMBER NOT NULL ENABLE, 
	"ACADEMIC_SESSION" VARCHAR2(20) NOT NULL ENABLE, 
	"SEMESTER" VARCHAR2(10) NOT NULL ENABLE, 
	"GPA" NUMBER, 
	"CGPA" NUMBER
   ) ;

  CREATE TABLE "MAXWELL_COURSE" 
   (	"COURSE_ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"COURSE_TITLE" VARCHAR2(255), 
	"COURSE_CODE" VARCHAR2(20), 
	"CREDIT_UNIT" NUMBER, 
	"COURSE_LEVEL" NUMBER, 
	"SEMESTER" VARCHAR2(10), 
	"DEPARTMENT_ID" NUMBER, 
	 PRIMARY KEY ("COURSE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MAXWELL_DEPARTMENTS" 
   (	"DEPARTMENT_ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NAME" VARCHAR2(100) NOT NULL ENABLE, 
	"DEPARTMENT_CODE" VARCHAR2(20), 
	 PRIMARY KEY ("DEPARTMENT_ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "UNIQUE_DEPARTMENT_NAME" UNIQUE ("NAME")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MAXWELL_EXAM_SCORES" 
   (	"SCORE_ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"REGISTRATION_ID" NUMBER NOT NULL ENABLE, 
	"MIDTERM_SCORE" NUMBER, 
	"FINAL_SCORE" NUMBER, 
	"TOTAL_SCORE" NUMBER, 
	"GRADE" VARCHAR2(2), 
	"GRADE_POINT" NUMBER, 
	 PRIMARY KEY ("SCORE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MAXWELL_PAYMENT_TYPES" 
   (	"TYPE_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"TYPE_NAME" VARCHAR2(50) NOT NULL ENABLE, 
	"FIXED_AMOUNT" NUMBER(10,2), 
	 PRIMARY KEY ("TYPE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MAXWELL_REGISTRATIONS" 
   (	"REGISTRATION_ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"STUDENT_ID" NUMBER NOT NULL ENABLE, 
	"COURSE_ID" NUMBER NOT NULL ENABLE, 
	"ACADEMIC_SESSION" NUMBER NOT NULL ENABLE, 
	"SEMESTER" VARCHAR2(10) NOT NULL ENABLE, 
	"SESSION_NUMBER" VARCHAR2(30), 
	 PRIMARY KEY ("REGISTRATION_ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "UQ_MAXWELL_REG" UNIQUE ("STUDENT_ID", "COURSE_ID", "ACADEMIC_SESSION", "SEMESTER")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MAXWELL_STUDENTS" 
   (	"STUDENT_ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"FULL_NAME" VARCHAR2(100) NOT NULL ENABLE, 
	"MATRIC_NO" VARCHAR2(20) NOT NULL ENABLE, 
	"DEPARTMENT_ID" NUMBER NOT NULL ENABLE, 
	"PASSWORD_HASH" VARCHAR2(255), 
	"CREATED_AT" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	 PRIMARY KEY ("STUDENT_ID")
  USING INDEX  ENABLE, 
	 UNIQUE ("MATRIC_NO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MAXWELL_STUDENT_PAYMENTS" 
   (	"PAYMENT_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"STUDENT_ID" NUMBER NOT NULL ENABLE, 
	"PAYMENT_TYPE_ID" NUMBER NOT NULL ENABLE, 
	"AMOUNT_PAID" NUMBER(10,2) NOT NULL ENABLE, 
	"REFERENCE_NO" VARCHAR2(100), 
	"ACADEMIC_SESSION" VARCHAR2(20), 
	"SEMESTER" VARCHAR2(10), 
	"PAYMENT_DATE" DATE DEFAULT SYSDATE, 
	"STATUS" VARCHAR2(20) DEFAULT 'Paid', 
	"STUDENT_LEVEL" NUMBER, 
	 PRIMARY KEY ("PAYMENT_ID")
  USING INDEX  ENABLE
   ) ;

  ALTER TABLE "MAXWELL_STUDENTS" ADD CONSTRAINT "FK_MAXWELL_STUDENT_DEPT" FOREIGN KEY ("DEPARTMENT_ID")
	  REFERENCES "MAXWELL_DEPARTMENTS" ("DEPARTMENT_ID") ENABLE;

  ALTER TABLE "MAXWELL_CGPA_SUMMARY" ADD CONSTRAINT "FK_MAXWELL_CGPA_STUDENT" FOREIGN KEY ("STUDENT_ID")
	  REFERENCES "MAXWELL_STUDENTS" ("STUDENT_ID") ENABLE;

  ALTER TABLE "MAXWELL_COURSE" ADD CONSTRAINT "FK_DEPARTMENT_ID" FOREIGN KEY ("DEPARTMENT_ID")
	  REFERENCES "MAXWELL_DEPARTMENTS" ("DEPARTMENT_ID") ENABLE;

  ALTER TABLE "MAXWELL_EXAM_SCORES" ADD CONSTRAINT "FK_MAXWELL_SCORE_REG" FOREIGN KEY ("REGISTRATION_ID")
	  REFERENCES "MAXWELL_REGISTRATIONS" ("REGISTRATION_ID") ENABLE;

  ALTER TABLE "MAXWELL_STUDENT_PAYMENTS" ADD CONSTRAINT "FK_PAYMENT_TYPE" FOREIGN KEY ("PAYMENT_TYPE_ID")
	  REFERENCES "MAXWELL_PAYMENT_TYPES" ("TYPE_ID") ENABLE;
  ALTER TABLE "MAXWELL_STUDENT_PAYMENTS" ADD CONSTRAINT "FK_MAXWELL_PAYMENT_STUDENT" FOREIGN KEY ("STUDENT_ID")
	  REFERENCES "MAXWELL_STUDENTS" ("STUDENT_ID") ENABLE;

  ALTER TABLE "MAXWELL_REGISTRATIONS" ADD CONSTRAINT "FK_MAXWELL_REG_STUDENT" FOREIGN KEY ("STUDENT_ID")
	  REFERENCES "MAXWELL_STUDENTS" ("STUDENT_ID") ENABLE;
  ALTER TABLE "MAXWELL_REGISTRATIONS" ADD CONSTRAINT "FK_MAXWELL_REG_COURSE" FOREIGN KEY ("COURSE_ID")
	  REFERENCES "MAXWELL_COURSE" ("COURSE_ID") ENABLE;




















  CREATE UNIQUE INDEX "UNIQUE_DEPARTMENT_NAME" ON "MAXWELL_DEPARTMENTS" ("NAME") 
  ;

  CREATE UNIQUE INDEX "UQ_MAXWELL_REG" ON "MAXWELL_REGISTRATIONS" ("STUDENT_ID", "COURSE_ID", "ACADEMIC_SESSION", "SEMESTER") 
  ;


create or replace PACKAGE maxwell_academics_pkg AS
  PROCEDURE calculate_gpa_cgpa_for_all_students;
END maxwell_academics_pkg;
/
create or replace PACKAGE maxwell_course_management_pkg AS
    PROCEDURE insert_course(
        p_course_title     IN VARCHAR2,
        p_course_code      IN VARCHAR2,
        p_credit_unit      IN NUMBER,
        p_course_level     IN NUMBER,
        p_semester         IN VARCHAR2,
        p_department_code  IN VARCHAR2
    );

    PROCEDURE update_course(
        p_course_id        IN NUMBER,
        p_course_title     IN VARCHAR2,
        p_course_code      IN VARCHAR2,
        p_credit_unit      IN NUMBER,
        p_course_level     IN NUMBER,
        p_semester         IN VARCHAR2,
        p_department_code  IN VARCHAR2
    );
END maxwell_course_management_pkg;
/
create or replace PACKAGE MAXWELL_DEPARTMENTS_PKG AS
  PROCEDURE ADD_DEPARTMENT(p_name VARCHAR2);
  PROCEDURE DELETE_DEPARTMENT(p_department_id NUMBER);
END MAXWELL_DEPARTMENTS_PKG;
/
create or replace PACKAGE maxwell_grade_pkg IS
  TYPE score_record IS RECORD (
    total_score NUMBER,
    grade       VARCHAR2(2),
    grade_point NUMBER
  );

  FUNCTION calculate_grade(midterm IN NUMBER, final IN NUMBER) RETURN score_record;
END maxwell_grade_pkg;
/
create or replace PACKAGE maxwell_score_pkg IS
  -- Upsert registration: Insert or update registration record
  PROCEDURE upsert_registration (
    p_registration_id IN MAXWELL_REGISTRATIONS.REGISTRATION_ID%TYPE,
    p_student_id      IN MAXWELL_REGISTRATIONS.STUDENT_ID%TYPE,
    p_course_id       IN MAXWELL_REGISTRATIONS.COURSE_ID%TYPE
  );

  -- Upsert exam score: Insert or update exam score record
  -- Returns generated SCORE_ID on insert via OUT parameter
  PROCEDURE upsert_exam_score (
    p_score_id        IN OUT NOCOPY MAXWELL_EXAM_SCORES.SCORE_ID%TYPE,
    p_registration_id IN MAXWELL_EXAM_SCORES.REGISTRATION_ID%TYPE,
    p_midterm_score   IN MAXWELL_EXAM_SCORES.MIDTERM_SCORE%TYPE,
    p_final_score     IN MAXWELL_EXAM_SCORES.FINAL_SCORE%TYPE,
    p_total_score     IN MAXWELL_EXAM_SCORES.TOTAL_SCORE%TYPE,
    p_grade           IN MAXWELL_EXAM_SCORES.GRADE%TYPE,
    p_grade_point     IN MAXWELL_EXAM_SCORES.GRADE_POINT%TYPE
  );
END maxwell_score_pkg;
/








create or replace PACKAGE maxwell_student_pkg AS

  -- Hash a password using SHA-256
  FUNCTION hash_password(p_password IN VARCHAR2) RETURN VARCHAR2;

  -- Generate matric number automatically for a department
  FUNCTION generate_matric_no(p_department_id IN NUMBER) RETURN VARCHAR2;

  -- Add a new student (auto-generate matric number)
  PROCEDURE add_student(
    p_full_name     IN VARCHAR2,
    p_department_id IN NUMBER,
    p_password_hash IN VARCHAR2
  );

  -- Update student information (matric_no passed explicitly)
  PROCEDURE update_student(
    p_student_id    IN NUMBER,
    p_full_name     IN VARCHAR2,
    p_matric_no     IN VARCHAR2,
    p_department_id IN NUMBER,
    p_password_hash IN VARCHAR2
  );

  -- Delete a student
  PROCEDURE delete_student(p_student_id IN NUMBER);

  -- Get student's full name by ID
  FUNCTION get_student_name(p_student_id IN NUMBER) RETURN VARCHAR2;

  -- List all students
  PROCEDURE list_students;

  -- Check if a matric number exists
  FUNCTION check_matric_no(p_matric_no IN VARCHAR2) RETURN BOOLEAN;

  -- Authenticate a user using matric number and password
  FUNCTION authenticate_user(p_username IN VARCHAR2, p_password IN VARCHAR2) RETURN BOOLEAN;

END maxwell_student_pkg;
/
create or replace PACKAGE maxwell_registration_pkg AS
  PROCEDURE register_student (
    p_course_id         IN maxwell_registrations.course_id%TYPE,
    p_academic_session  IN maxwell_registrations.academic_session%TYPE,
    p_semester          IN maxwell_registrations.semester%TYPE,
    p_session           IN maxwell_registrations.session_number%TYPE,
    p_app_user          IN maxwell_students.matric_no%TYPE
  );

PROCEDURE add_payment (
  p_app_user          IN maxwell_students.matric_no%TYPE,
  p_academic_session  IN maxwell_student_payments.academic_session%TYPE,
  p_semester          IN VARCHAR2,
  p_payment_type_id   IN maxwell_payment_types.type_id%TYPE,
  p_student_level     IN maxwell_student_payments.student_level%TYPE
);


END maxwell_registration_pkg;
/






















   CREATE SEQUENCE  "MAXWELL_COURSES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "MAXWELL_VW_STUDENT_GPA_CGPA" ("STUDENT_ID", "FULL_NAME", "MATRIC_NO", "ACADEMIC_SESSION", "SEMESTER", "GPA", "CGPA") AS 
  SELECT
  s.student_id,
  st.full_name,
  st.matric_no,
  s.academic_session,
  s.semester,
  s.gpa,
  s.cgpa
FROM
  maxwell_cgpa_summary s
  JOIN maxwell_students st ON s.student_id = st.student_id;


create or replace PACKAGE BODY maxwell_academics_pkg AS

  PROCEDURE calculate_gpa_cgpa_for_all_students IS
  BEGIN
    FOR rec IN (
      SELECT DISTINCT student_id FROM maxwell_registrations
    ) LOOP
      FOR sem_rec IN (
        WITH semester_gpa AS (
          SELECT
            r.student_id,
            r.academic_session,
            r.semester,
            SUM(s.grade_point * c.credit_unit) AS weighted_points,
            SUM(c.credit_unit) AS total_units
          FROM
            maxwell_registrations r
            JOIN maxwell_exam_scores s ON r.registration_id = s.registration_id
            JOIN maxwell_course c ON r.course_id = c.course_id
          WHERE
            r.student_id = rec.student_id
          GROUP BY
            r.student_id, r.academic_session, r.semester
        ),
        ordered_semesters AS (
          SELECT
            student_id,
            academic_session,
            semester,
            weighted_points,
            total_units,
            ROW_NUMBER() OVER (ORDER BY academic_session, semester) AS sem_order
          FROM semester_gpa
        ),
        cumulative AS (
          SELECT
            s1.student_id,
            s1.academic_session,
            s1.semester,
            s1.weighted_points,
            s1.total_units,
            SUM(s2.weighted_points) OVER (PARTITION BY s1.student_id ORDER BY s1.sem_order) AS cum_weighted_points,
            SUM(s2.total_units) OVER (PARTITION BY s1.student_id ORDER BY s1.sem_order) AS cum_total_units
          FROM ordered_semesters s1
          JOIN ordered_semesters s2 ON s2.sem_order <= s1.sem_order AND s2.student_id = s1.student_id
        )
        SELECT
          student_id,
          academic_session,
          semester,
          ROUND(weighted_points / total_units, 2) AS gpa,
          ROUND(cum_weighted_points / cum_total_units, 2) AS cgpa
        FROM cumulative
        WHERE student_id = rec.student_id
        ORDER BY academic_session, semester
      ) LOOP
        MERGE INTO maxwell_cgpa_summary tgt
        USING (
          SELECT sem_rec.student_id AS student_id,
                 sem_rec.academic_session AS academic_session,
                 sem_rec.semester AS semester,
                 sem_rec.gpa AS gpa,
                 sem_rec.cgpa AS cgpa
          FROM dual
        ) src
        ON (
          tgt.student_id = src.student_id AND
          tgt.academic_session = src.academic_session AND
          tgt.semester = src.semester
        )
        WHEN MATCHED THEN
          UPDATE SET tgt.gpa = src.gpa, tgt.cgpa = src.cgpa
        WHEN NOT MATCHED THEN
          INSERT (student_id, academic_session, semester, gpa, cgpa)
          VALUES (src.student_id, src.academic_session, src.semester, src.gpa, src.cgpa);
      END LOOP;
    END LOOP;
  END calculate_gpa_cgpa_for_all_students;

END maxwell_academics_pkg;
/
create or replace PACKAGE BODY maxwell_course_management_pkg AS

    PROCEDURE insert_course(
        p_course_title     IN VARCHAR2,
        p_course_code      IN VARCHAR2,
        p_credit_unit      IN NUMBER,
        p_course_level     IN NUMBER,
        p_semester         IN VARCHAR2,
        p_department_code  IN VARCHAR2
    ) IS
        v_department_id    maxwell_departments.department_id%TYPE;
    BEGIN
        SELECT department_id
        INTO v_department_id
        FROM maxwell_departments
        WHERE department_code = p_department_code;

        INSERT INTO maxwell_course (
            course_title, course_code, credit_unit,
            course_level, semester, department_id
        )
        VALUES (
            p_course_title, p_course_code, p_credit_unit,
            p_course_level, p_semester, v_department_id
        );
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20001, 'Invalid department code: ' || p_department_code);
    END insert_course;

    PROCEDURE update_course(
        p_course_id        IN NUMBER,
        p_course_title     IN VARCHAR2,
        p_course_code      IN VARCHAR2,
        p_credit_unit      IN NUMBER,
        p_course_level     IN NUMBER,
        p_semester         IN VARCHAR2,
        p_department_code  IN VARCHAR2
    ) IS
        v_department_id    maxwell_departments.department_id%TYPE;
    BEGIN
        SELECT department_id
        INTO v_department_id
        FROM maxwell_departments
        WHERE department_code = p_department_code;

        UPDATE maxwell_course
        SET
            course_title   = p_course_title,
            course_code    = p_course_code,
            credit_unit    = p_credit_unit,
            course_level   = p_course_level,
            semester       = p_semester,
            department_id  = v_department_id
        WHERE
            course_id = p_course_id;

        IF SQL%ROWCOUNT = 0 THEN
            RAISE_APPLICATION_ERROR(-20002, 'Course ID not found: ' || p_course_id);
        END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20001, 'Invalid department code: ' || p_department_code);
    END update_course;

END maxwell_course_management_pkg;
/
create or replace PACKAGE BODY MAXWELL_DEPARTMENTS_PKG AS

  -- Helper function to generate department code from name
  FUNCTION GENERATE_CODE(p_name VARCHAR2) RETURN VARCHAR2 IS
    v_words  DBMS_SQL.VARCHAR2_TABLE; -- to hold split words
    v_code   VARCHAR2(10) := '';
    v_word   VARCHAR2(100);
    v_pos    PLS_INTEGER := 1;
    v_start  PLS_INTEGER := 1;
    v_end    PLS_INTEGER;
    v_len    PLS_INTEGER := LENGTH(p_name);
    v_count  PLS_INTEGER := 0;
  BEGIN
    -- Split the department name into words by spaces and take first letters
    WHILE v_pos <= v_len LOOP
      v_end := INSTR(p_name || ' ', ' ', v_pos);
      EXIT WHEN v_end = 0;
      v_word := SUBSTR(p_name, v_pos, v_end - v_pos);
      IF v_word IS NOT NULL AND TRIM(v_word) IS NOT NULL THEN
        v_count := v_count + 1;
        v_code := v_code || UPPER(SUBSTR(v_word,1,1));
        EXIT WHEN v_count = 3; -- limit code length to 3 letters
      END IF;
      v_pos := v_end + 1;
    END LOOP;

    RETURN v_code;
  END GENERATE_CODE;

  PROCEDURE ADD_DEPARTMENT(p_name VARCHAR2) IS
    v_code VARCHAR2(10);
  BEGIN
    v_code := GENERATE_CODE(p_name);

    INSERT INTO MAXWELL_DEPARTMENTS(NAME, DEPARTMENT_CODE)
    VALUES (UPPER(p_name), v_code);
  END;

  PROCEDURE DELETE_DEPARTMENT(p_department_id NUMBER) IS
  BEGIN
    DELETE FROM MAXWELL_DEPARTMENTS WHERE DEPARTMENT_ID = p_department_id;
  END;

END MAXWELL_DEPARTMENTS_PKG;
/
create or replace PACKAGE BODY maxwell_grade_pkg IS

  FUNCTION calculate_grade(midterm IN NUMBER, final IN NUMBER) RETURN score_record IS
    result score_record;
    total NUMBER := NVL(midterm, 0) + NVL(final, 0);
  BEGIN
    -- Validate total score does not exceed 100
    IF total > 100 THEN
      RAISE_APPLICATION_ERROR(-20001, 'Total score cannot exceed 100. Given total: ' || total);
    END IF;

    result.total_score := total;

    IF total >= 70 THEN
      result.grade := 'A';
      result.grade_point := 4;
    ELSIF total >= 60 THEN
      result.grade := 'B';
      result.grade_point := 3;
    ELSIF total >= 50 THEN
      result.grade := 'C';
      result.grade_point := 2;
    ELSIF total >= 45 THEN
      result.grade := 'D';
      result.grade_point := 1;
    ELSE
      result.grade := 'F';
      result.grade_point := 0;
    END IF;

    RETURN result;
  END calculate_grade;

END maxwell_grade_pkg;
/
create or replace PACKAGE BODY maxwell_score_pkg IS

  PROCEDURE upsert_registration (
    p_registration_id IN MAXWELL_REGISTRATIONS.REGISTRATION_ID%TYPE,
    p_student_id      IN MAXWELL_REGISTRATIONS.STUDENT_ID%TYPE,
    p_course_id       IN MAXWELL_REGISTRATIONS.COURSE_ID%TYPE
  ) IS
  BEGIN
    -- Try update first
    UPDATE MAXWELL_REGISTRATIONS
    SET
      STUDENT_ID = p_student_id,
      COURSE_ID  = p_course_id
    WHERE REGISTRATION_ID = p_registration_id;

    IF SQL%ROWCOUNT = 0 THEN
      -- No row updated, insert new
      INSERT INTO MAXWELL_REGISTRATIONS (REGISTRATION_ID, STUDENT_ID, COURSE_ID)
      VALUES (p_registration_id, p_student_id, p_course_id);
    END IF;

    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
  END upsert_registration;


  PROCEDURE upsert_exam_score (
    p_score_id        IN OUT NOCOPY MAXWELL_EXAM_SCORES.SCORE_ID%TYPE,
    p_registration_id IN MAXWELL_EXAM_SCORES.REGISTRATION_ID%TYPE,
    p_midterm_score   IN MAXWELL_EXAM_SCORES.MIDTERM_SCORE%TYPE,
    p_final_score     IN MAXWELL_EXAM_SCORES.FINAL_SCORE%TYPE,
    p_total_score     IN MAXWELL_EXAM_SCORES.TOTAL_SCORE%TYPE,
    p_grade           IN MAXWELL_EXAM_SCORES.GRADE%TYPE,
    p_grade_point     IN MAXWELL_EXAM_SCORES.GRADE_POINT%TYPE
  ) IS
    l_new_score_id MAXWELL_EXAM_SCORES.SCORE_ID%TYPE;
  BEGIN
    IF p_score_id IS NOT NULL THEN
      -- Update existing record
      UPDATE MAXWELL_EXAM_SCORES
      SET
        REGISTRATION_ID = p_registration_id,
        MIDTERM_SCORE   = p_midterm_score,
        FINAL_SCORE     = p_final_score,
        TOTAL_SCORE     = p_total_score,
        GRADE           = p_grade,
        GRADE_POINT     = p_grade_point
      WHERE SCORE_ID = p_score_id;

      IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Exam score with ID ' || p_score_id || ' not found for update.');
      END IF;
    ELSE
      -- Insert new record, let Oracle generate SCORE_ID
      INSERT INTO MAXWELL_EXAM_SCORES (
        REGISTRATION_ID,
        MIDTERM_SCORE,
        FINAL_SCORE,
        TOTAL_SCORE,
        GRADE,
        GRADE_POINT
      ) VALUES (
        p_registration_id,
        p_midterm_score,
        p_final_score,
        p_total_score,
        p_grade,
        p_grade_point
      )
      RETURNING SCORE_ID INTO l_new_score_id;

      -- Return generated SCORE_ID to caller
      p_score_id := l_new_score_id;
    END IF;

    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
  END upsert_exam_score;

END maxwell_score_pkg;
/








create or replace PACKAGE BODY maxwell_student_pkg AS

  -- Hash a password using SHA-256 and return uppercase hex string
  FUNCTION hash_password(p_password IN VARCHAR2) RETURN VARCHAR2 IS
    l_hash RAW(32);
    l_raw  RAW(2000);
  BEGIN
    l_raw := UTL_I18N.STRING_TO_RAW(p_password, 'AL32UTF8');
    l_hash := DBMS_CRYPTO.HASH(l_raw, DBMS_CRYPTO.HASH_SH256);
    RETURN UPPER(RAWTOHEX(l_hash));  -- RETURN uppercase hex hash
  END hash_password;

  -- Generate matric number automatically for a department
  FUNCTION generate_matric_no(p_department_id IN NUMBER) RETURN VARCHAR2 IS
    v_prefix CONSTANT VARCHAR2(3) := 'AUL';
    v_dept_code VARCHAR2(10);
    v_year VARCHAR2(4);
    v_seq_num NUMBER;
    v_seq_num_str VARCHAR2(5);
    v_matric_no VARCHAR2(50);
  BEGIN
    -- Try to get the department code
    SELECT department_code INTO v_dept_code
    FROM maxwell_departments
    WHERE department_id = p_department_id;

    v_year := TO_CHAR(SYSDATE, 'YYYY');

    -- Get next sequence number for dept & year by parsing existing matric numbers
    SELECT NVL(MAX(TO_NUMBER(SUBSTR(matric_no, -5))), 0) + 1
    INTO v_seq_num
    FROM maxwell_students
    WHERE department_id = p_department_id
      AND SUBSTR(matric_no, LENGTH(v_prefix) + LENGTH(v_dept_code) + 3, 4) = v_year;

    v_seq_num_str := LPAD(v_seq_num, 5, '0');

    v_matric_no := v_prefix || '/' || v_dept_code || '/' || v_year || '/' || v_seq_num_str;

    RETURN v_matric_no;

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN 'ERR/NO_DEPT';
    WHEN OTHERS THEN
      RETURN 'ERR/GEN_FAIL';
  END generate_matric_no;

  -- Add a new student (auto-generate matric number)
  PROCEDURE add_student(
    p_full_name     IN VARCHAR2,
    p_department_id IN NUMBER,
    p_password_hash IN VARCHAR2
  ) IS
    v_matric_no VARCHAR2(50);
  BEGIN
    v_matric_no := generate_matric_no(p_department_id);

    INSERT INTO maxwell_students (
      full_name, matric_no, department_id, password_hash
    ) VALUES (
      UPPER(p_full_name), UPPER(v_matric_no), p_department_id, UPPER(p_password_hash)
    );
  END add_student;

  -- Update student information (matric_no passed explicitly)
  PROCEDURE update_student(
    p_student_id    IN NUMBER,
    p_full_name     IN VARCHAR2,
    p_matric_no     IN VARCHAR2,
    p_department_id IN NUMBER,
    p_password_hash IN VARCHAR2
  ) IS
  BEGIN
    UPDATE maxwell_students
    SET full_name     = UPPER(p_full_name),
        matric_no     = UPPER(p_matric_no),
        department_id = p_department_id,
        password_hash = UPPER(p_password_hash)
    WHERE student_id = p_student_id;
  END update_student;

  -- Delete a student
  PROCEDURE delete_student(p_student_id IN NUMBER) IS
  BEGIN
    DELETE FROM maxwell_students
    WHERE student_id = p_student_id;
  END delete_student;

  -- Get student's full name by ID
  FUNCTION get_student_name(p_student_id IN NUMBER) RETURN VARCHAR2 IS
    v_name VARCHAR2(100);
  BEGIN
    SELECT full_name INTO v_name
    FROM maxwell_students
    WHERE student_id = p_student_id;
    RETURN v_name;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
  END get_student_name;

  -- List all students
  PROCEDURE list_students IS
  BEGIN
    FOR rec IN (
      SELECT student_id, full_name, matric_no, department_id
      FROM maxwell_students
      ORDER BY student_id
    ) LOOP
      DBMS_OUTPUT.PUT_LINE('ID: ' || rec.student_id ||
                           ', Name: ' || rec.full_name ||
                           ', Matric: ' || rec.matric_no ||
                           ', Dept ID: ' || rec.department_id);
    END LOOP;
  END list_students;

  -- Check if a matric number exists
  FUNCTION check_matric_no(p_matric_no IN VARCHAR2) RETURN BOOLEAN IS
    v_count NUMBER;
  BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM maxwell_students
    WHERE matric_no = UPPER(p_matric_no);

    RETURN v_count > 0;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN FALSE;
  END check_matric_no;

  -- Authenticate a user using matric_no = p_username and password
  FUNCTION authenticate_user(p_username IN VARCHAR2, p_password IN VARCHAR2) RETURN BOOLEAN IS
    v_hash_stored VARCHAR2(255);
    v_hash_input  VARCHAR2(255);
  BEGIN
    SELECT password_hash INTO v_hash_stored
    FROM maxwell_students
    WHERE matric_no = UPPER(p_username);

    v_hash_input := hash_password(p_password);

    RETURN v_hash_input = v_hash_stored;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN FALSE;
  END authenticate_user;

END maxwell_student_pkg;
/
create or replace PACKAGE BODY maxwell_registration_pkg AS

  PROCEDURE register_student (
    p_course_id         IN maxwell_registrations.course_id%TYPE,
    p_academic_session  IN maxwell_registrations.academic_session%TYPE,
    p_semester          IN maxwell_registrations.semester%TYPE,
    p_session           IN maxwell_registrations.session_number%TYPE,
    p_app_user          IN maxwell_students.matric_no%TYPE
  ) IS
    v_student_id   maxwell_students.student_id%TYPE;
    v_count        NUMBER;
  BEGIN
    -- Retrieve student ID from matric number
    SELECT student_id
    INTO v_student_id
    FROM maxwell_students
    WHERE matric_no = p_app_user;

    -- Check if tuition is paid
   

    SELECT COUNT(*) INTO v_count
    FROM maxwell_student_payments
    WHERE student_id = v_student_id
      AND academic_session = p_session
      AND student_level = p_academic_session
      AND semester = p_semester
      AND status = 'Paid'
      AND payment_type_id IN (
        SELECT type_id FROM maxwell_payment_types WHERE UPPER(type_name) = 'TUITION'
      );

    IF v_count = 0 THEN
      APEX_ERROR.ADD_ERROR(
        p_message          => 'Cannot register. Tuition payment for this session/semester is not completed.',
        p_display_location => APEX_ERROR.c_inline_in_notification
      );
      RETURN;
    END IF;

    -- Check for duplicate registration
    SELECT COUNT(*) INTO v_count
    FROM maxwell_registrations
    WHERE student_id = v_student_id
      AND course_id = p_course_id
      AND academic_session = p_academic_session
      AND semester = p_semester
      AND session_number = p_session;

    IF v_count > 0 THEN
      APEX_ERROR.ADD_ERROR(
        p_message          => 'You are already registered for this course.',
        p_display_location => APEX_ERROR.c_inline_in_notification
      );
      RETURN;
    END IF;

    -- Insert course registration
    INSERT INTO maxwell_registrations (
      student_id,
      course_id,
      academic_session,
      semester,
      session_number
    ) VALUES (
      v_student_id,
      p_course_id,
      p_academic_session,
      p_semester,
      p_session
    );

    -- Optional debug output
    DBMS_OUTPUT.PUT_LINE('Student registration successful for student_id=' || v_student_id);

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      APEX_ERROR.ADD_ERROR(
        p_message          => 'Student not found. Please contact admin.',
        p_display_location => APEX_ERROR.c_inline_in_notification
      );
    WHEN OTHERS THEN
      APEX_ERROR.ADD_ERROR(
        p_message          => 'Unexpected error: ' || SQLERRM,
        p_display_location => APEX_ERROR.c_inline_in_notification
      );
  END register_student;

  PROCEDURE add_payment (
    p_app_user          IN maxwell_students.matric_no%TYPE,
    p_academic_session  IN maxwell_student_payments.academic_session%TYPE,
    p_semester          IN VARCHAR2,
    p_payment_type_id   IN maxwell_payment_types.type_id%TYPE,
    p_student_level     IN maxwell_student_payments.student_level%TYPE
  ) IS
    v_student_id   maxwell_students.student_id%TYPE;
    v_amount_num   NUMBER;
    v_reference_no VARCHAR2(50);
    v_exists      NUMBER;
BEGIN
    DBMS_OUTPUT.PUT_LINE('add_payment started');

    -- Retrieve student ID from matric number
    BEGIN
      SELECT student_id INTO v_student_id FROM maxwell_students WHERE matric_no = p_app_user;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        APEX_ERROR.ADD_ERROR(
          p_message          => 'Student not found with matric number: ' || p_app_user,
          p_display_location => APEX_ERROR.c_inline_in_notification
        );
        RETURN;
    END;

    -- Validate academic session input
    IF p_academic_session IS NULL OR TRIM(p_academic_session) = '' THEN
      APEX_ERROR.ADD_ERROR(
        p_message          => 'Academic session is required.',
        p_display_location => APEX_ERROR.c_inline_in_notification
      );
      RETURN;
    END IF;

    -- Validate payment_type_id exists in lookup table
    SELECT COUNT(*) INTO v_exists FROM maxwell_payment_types WHERE type_id = p_payment_type_id;
    IF v_exists = 0 THEN
      APEX_ERROR.ADD_ERROR(
        p_message          => 'Payment type ID "' || p_payment_type_id || '" not found in lookup table.',
        p_display_location => APEX_ERROR.c_inline_in_notification
      );
      RETURN;
    END IF;

    -- Validate semester string directly without converting to number
    IF UPPER(TRIM(p_semester)) NOT IN ('FIRST SEMESTER', 'FIRST', 'SECOND SEMESTER', 'SECOND', '1', '2') THEN
      APEX_ERROR.ADD_ERROR(
        p_message          => 'Invalid semester value: ' || p_semester,
        p_display_location => APEX_ERROR.c_inline_in_notification
      );
      RETURN;
    END IF;

    DBMS_OUTPUT.PUT_LINE('Semester value is valid: ' || p_semester);

    -- Check for duplicate payment
    SELECT COUNT(*) INTO v_exists
      FROM maxwell_student_payments
     WHERE student_id      = v_student_id
       AND academic_session = p_academic_session
       AND semester         = p_semester
       AND payment_type_id  = p_payment_type_id
       AND student_level    = p_student_level
       AND status           = 'Paid';

    IF v_exists > 0 THEN
      APEX_ERROR.ADD_ERROR(
        p_message          => 'Fees have already been paid for this payment type, level, semester, and academic session.',
        p_display_location => APEX_ERROR.c_inline_in_notification
      );
      RETURN;
    END IF;

    -- Lookup fixed amount from payment type
    BEGIN
      SELECT fixed_amount INTO v_amount_num FROM maxwell_payment_types WHERE type_id = p_payment_type_id;
      DBMS_OUTPUT.PUT_LINE('Amount retrieved from payment type: ' || v_amount_num);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        APEX_ERROR.ADD_ERROR(
          p_message          => 'Fixed amount not found for payment type ID: ' || p_payment_type_id,
          p_display_location => APEX_ERROR.c_inline_in_notification
        );
        RETURN;
    END;

    -- Generate unique reference number
    v_reference_no := 'PAY-' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-' || DBMS_RANDOM.STRING('U', 8);
    DBMS_OUTPUT.PUT_LINE('Reference no generated: ' || v_reference_no);

    -- Insert payment record including student_level
    INSERT INTO maxwell_student_payments (
      student_id,
      academic_session,
      semester,
      payment_type_id,
      amount_paid,
      status,
      reference_no,
      payment_date,
      student_level
    ) VALUES (
      v_student_id,
      p_academic_session,
      p_semester,
      p_payment_type_id,
      v_amount_num,
      'Paid',
      v_reference_no,
      SYSDATE,
      p_student_level
    );

    DBMS_OUTPUT.PUT_LINE('Payment inserted successfully');

EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error in add_payment: ' || SQLERRM);
      APEX_ERROR.ADD_ERROR(
        p_message          => 'Payment insertion failed (Error code ' || SQLCODE || '): ' || SQLERRM,
        p_display_location => APEX_ERROR.c_inline_in_notification
      );
END add_payment;

END maxwell_registration_pkg;
/

 